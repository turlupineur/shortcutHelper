service propertyLoaderService {
	@ This service will contain the strategy used to load specific config.
	Because some configs are defined as strategy during development/test
	and defined as file on the system after deployment, this service
	ensures a seamless reading of the config and properties.
	Upon request, the service will look for a folder "config" in the 
	current working folder. If the folder is there, all config will be
	loaded locally, otherwise all configs will be loaded as resource.
	@
	
	setReadPropertyAsLocal returns void {
		NoArgument
	}
	
	setReadPropertyAsResource returns void{
		NoArgument
	}
}

service clipboardService{
	@  Represents the clipboard. This service is the basic for every clipboard operation.
	It has an intern clipboard object defining where the value will be saved (in the real clipboard or
	intern).@
	setClipboard returns void {
		@ Sets the clipboard to the current value. Null are accepted.@
		param value STRING
	}
	
	getClipboard returns STRING {
		@ Returns the value of the clipboard. This method is guaranteed to always returns a result.
		If an exception is thrown while retrieving the value, null is returned.@
		NoArgument
	}
}

service StringStorageService{
	@ Stores string on the hard drive so all values are available after closing the application.
	All values are stored in text files. Each text file  name follows 
	the pattern: 
		OWNER_NAME.txt
	The owner represents the entity for which the value has been saved. Along with the name, it forms
	a unique id identifying the saved string.
	
	Note that this service doesn't do any dynamic loads of data. Closing the application at any time won't
	result in a lost of data.
	
	Service properties shortcuthelper.service.stringstorageservice in config/property/application.yaml can configure
		- targetfolder: Where all data will be saved. Target folder must exists. By default: storage/stringstorageservice
	@
	
	storeString returns void{
		@Stores the given string. If the key for the string already exists, it gets replaced.
		if an error occurs during writing, an IllegalStateException will be thrown.@
		param owner STRING // not null
		param vName STRING // not null
		param str STRING   // not null
	}
	
	readString returns STRING{
		@ Retrieves the saved string. Return null if doesnt exists. If an error occurs during reading, 
		an IllegalStateException is thrown.@
		param owner STRING // not null
		param vName STRING // not null
	}
	
	deleteString returns BOOLEAN{
		@Deletes the stored string if present. Returns true if data was removed or nothing was to be removed.@
		param owner STRING // not null
		param vName STRING // not null
	}
	
	stringIsStored returns BOOLEAN{
		param owner STRING // not null
		param vName STRING // not null
	}
	
	deleteAllStringForOwner returns BOOLEAN{
		@ Deletes all string for the owner. Returns true if a something was deleted.
		Returns false if nothing was deleted and returns IllegalStateException if something
		wrong happens during the operation.@
		param owner STRING
	}
	
	listAllStorageForOwner returns LIST_STRING{
		@Returns a list of all the storage for this owner.@
		param owner STRING
	}
}