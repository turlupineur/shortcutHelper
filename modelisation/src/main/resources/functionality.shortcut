functionality refreshFunctionality {
	using : propertyHelper
			shortcutHelper
			variableHelper;
	input parameter :
	returns : void 
	implementation {
		
		variable EXCEPTION exceptionOccuredRefreshProperties = null
		variable EXCEPTION exceptionOccuredRefreshShortcuts = null
		
		exceptionOccuredRefreshProperties = callComponentMethod shortcutHelper.shortcutHelper.refresh()
		
		if exceptionOccuredRefreshProperties = @ any exception @
		{
			showerror "Error while refreshing properties: " @ + exceptionOccuredRefreshProperties @
		};
		
		exceptionOccuredRefreshShortcuts = callComponentMethod propertyHelper.propertyHelper.refresh()
		
		if exceptionOccuredRefreshShortcuts = @ any exception @
		{
			showerror "Error while refreshing shortcuts: " @ + exceptionOccuredRefreshShortcuts @
		};
		
		if exceptionOccuredRefreshProperties = null and exceptionOccuredRefreshShortcuts = null
		{
			showinfo "Application refreshed"
		};
	}
}

functionality executerFunctionality{
	using : getClipboardLogic 
			beanHelper
			functionalityContainerHelper
			shortcutFactoryHelper
			variableHelper;
	input parameter:
	parameter shortcutToExecute SHORTCUT required
	returns : void
	implementation{
		@ Executes the appropriate command based on the given shortcut.
		  Steps:
		  	
		  	- Retrive the shortcut to execute.
		  	- Replace all ${CLIPBOARD_CONTENT} with the value of the current clipboard in the params.
		  	- Retrieve the bean for the command.
		  	- Creates the appropriate container for the command.
		@
	}
}

functionality copyToClipboardFunctionality {
	@ Copies a value defined in the shortcut in the clipboard.@
	
	using : setClipboardLogic
			beanUtil
			beanHelper;
	input parameter : 
		parameter clipboard STRING required
	returns : void
	
	implementation
	{
		callLogic setClipboardLogic (
			set clipboardValue = clipboard
		)
		showinfo "Value copied to clipboard !"
	}
}

functionality openUrlFunctionality{
	@ Open the url using default internet browser.@
	
	using: ;
	
	input parameter :
		parameter url STRING required
	returns : void
	
	implementation
	{
		@ opens url in browser @
	}
}

functionality formatStringFunctionality{
	@ Format the string in the clipboard from a format to another. If the String is already in the target format, 
	the command will reverse the format back to the origal or do nothing depending on the 
	config provided. The result is copied back to the clipboard.@
	
	using : getClipboardLogic
			setClipboardLogic;
	
	input parameter:
		parameter originalFormat STRING required // Contains a regular expression.
		parameter transformationToTargetFormat STRING required // Contains a regular expression for specifying how to convert from original format to target format.
		parameter oTargetFormat STRING optional // Contains a regular expression.
		parameter oTransformationToOriginalFormat STRING optional // Contains a regular expression for specifying how to convert from target format back to original format.
		parameter dReverseFormat BOOLEAN default // (default true) If true and the string in clipboard already has the target format, 
		// then the string is reverted back to its origin format. If false then  nothing is performed if the clipboard 
		// already has the target format
	returns : void
	
	implementation {
		
		
		variable STRING clipboard;
		
		clipboard = callLogic getClipboardLogic()
		if oTargetFormat = @not null@ {
			if clipboard = oTargetFormat // clipboard has target format
			{
			if dReverseFormat = true{
				clipboard = oTransformationToOriginalFormat // reformat back to originalFormat
				callLogic setClipboardLogic (set clipboardValue = clipboard)
				showinfo "Value reversed back to original format."
			}else{
				showinfo "Value already formatted. Nothing was done."
			};
		
			};
		}else{
			if clipboard = originalFormat // clipboard has origin format
			{
				clipboard = transformationToTargetFormat // format to target format.
				showinfo "Value formatted."
				callLogic setClipboardLogic (set clipboardValue = clipboard)
			}else{
				showerror  "Clipboard format unknown."
			};
		};
		
		
	}
	
}